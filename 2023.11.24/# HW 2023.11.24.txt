ШАБЛОНЫ ПРОЕКТИРОВАНИЯ, ЧАСТЬ 1

  ==========  1  ==========  

Реализуйте класс ClassBuilder по шаблону Строитель для формирования текста кода класса.

Строитель должен предоставить возможность:
  — задавать имя класса
  — добавлять в класс поля класса со значениями
  — добавлять в конструктор атрибуты экземпляра со значениями (без передачи аргументов в конструктор) 

При отсутствии добавленных полей, строитель должен сгенерировать заглушку под заголовком класса.

Не забудьте учесть пробелы и отступы.

Человекочитаемое строковое представление ClassBuilder должно вернуть строку с нужным кодом.

Пример тестов:
    >>> cb = ClassBuilder('Person').add_inst_attr('name', '').add_inst_attr('age', 0)
    >>> print(cb)
    class Person:
        def __init__(self):
            self.name = ''
            self.age = 0
    >>> 
    >>> cb = ClassBuilder('Test').add_cls_field('__protected', []).add_inst_attr('foo', 'bar')
    >>> print(cb)
    class Test:
        __protected = []

        def __init__(self):
            self.foo = 'bar'
    >>> 
    >>> cb = ClassBuilder('Foo')                     
    >>> print(cb)                                   
    class Foo:
        pass
    >>>



  ==========  2  ==========

Доработайте написанные на лекции классы HTMLTag и HTMLBuilder таким образом, чтобы для каждого HTML-тэга была возможность добавить произвольное количество HTML атрибутов с именем и значением.

Используйте в параметрах соответствующих методов произвольный словарь аргументов **kwargs



  ==========  3  ==========

Реализуйте класс, HTMLProfile описывающий HTML документ портфолио человека.
Добавьте класс Строителя CVProfiler для генерации такого HTML документа.

Воспользуйтесь реализованными в предыдущей задаче классами HTMLTag и HTMLBuilder.

Класс должен предоставить возможность добавить:
  — обязательный раздел с фио, возрастом, и сферой занятости
  — необязательный раздел с образованием (учебное заведение, специальность, год окончания)
  — необязательный раздел с успешными работами/проектами
  — обязательный раздел с произвольным набором полей контактов (email обязателен)

В случае появления пункта из необязательного раздела, у этого раздела должен быть подзаголовок. Если для раздела не заявлено ни одного пункта, то подзаголовок опускается.

Добавьте к строителю метод build(), который вернёт сформированный объект.

Реализуйте минимальную вёрстку.

Человекочитаемое строковое представление CVProfiler должно вернуть строку с нужным кодом.

Пример использования:

    cv1 = CVProfiler('Иванов Иван Иванович', 26, 'художник-фрилансер', 'ivv@abc.de')\
              .add_education('Архитектурная Академия', 'Компьютерный дизайн', 2019)
              .add_project('Разработка логотипа для компании по производству снеков', path_to_image)\
              .add_project('UI разработка для интернет-магазина для восковых дел мастеров', path_to_image, path_to_image)\
              .add_contact(devianart='ivovuvan_in_art')\
              .add_contact(telegram='@ivovuvan')\
              .build()
    print(cv1)

Пример ожидаемой структуры HTML-документа:

    <html>
      <head>
        <title>Иван: портфолио</title>
      </head>
      <body>
        <div ...>
          <h2>Обо мне</h2>
          <p ...>...</p>
          ...
        </div>
        ...
        <div ...>
          <h2>Образование</h2>
          <ul ...>
            <li>
              <p ...>...</p>
            </li>
          </ul>
          ...
        </div>
        ...
      </body>
    </html>

Структура HTML кода может отличаться — в этой части задания можно себя не ограничивать.



  ==========  4  ==========

В файле # ref 4.py есть классы File и Folder, а также функция верхнего уровня ls(). 

Используя шаблон Компоновщик напишите реализацию класса Folder таким образом, чтобы функция верхнего уровня ls() могла принимать на вход экземпляры обоих классов File и Folder.

Класс File и функция ls() не должны быть изменены.



  ==========  5  ==========

В файле # ref 5.py есть класс TestCase c несколькими методами, вызов которых вы хотите контролировать.

Реализуйте класс по шаблону Команда, обеспечивающий следующую функциональность:
  — хранение истории операций
  — отмена последних операций
  — повторного выполнения отменённых операций
  — перехвата потенциальных исключений

Класс TestCase не должен быть изменён.



  =========================

Каждый класс должен быть документирован. 
Каждый метод кроме встроенных (специальных) должен быть документирован.

Каждое поле класса должно быть аннотировано. 
Атрибуты экземпляра аннотируются в том случае, если типы их значений не совпадают с соответствующими переданными в конструктор аргументами, или если атрибуты создаются безотносительно переданных в конструктор аргументов.
Каждый параметр (кроме self и cls) всех методов должен быть аннотирован. 
Каждое возвращаемое значение методов кроме встроенных (специальных) должно быть аннотировано.

Во всех случаях аннотация опускается, если с аннотируемым идентификатором может быть связан объект произвольного типа.

Помимо перечисленных в каждой задаче обязательных атрибутов классов и экземпляров возможно добавление собственных вспомогательных атрибутов и методов.

Работа классов тестируется в режиме инспекции файла с кодом.
Ввод и вывод в стандартные потоки результатов тестов копируются.
Копия в виде комментария помещается в конец файла с кодом задачи.

Невыполнение дополнительных задач не повлечёт снижения баллов за задание. Тем не менее они настоятельно рекомендуются к решению.

В сервис Журнал отправляется сообщение о выполнении всех частей задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Регулярно получайте обновления в свой локальный репозиторий из удалённого репозитория.