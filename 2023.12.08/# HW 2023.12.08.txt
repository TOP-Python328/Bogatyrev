АРХИТЕКТУРНЫЙ ПОДХОД MVC

  ==========  1  ==========  

Напишите CLI (command line interface) приложение для проверки на корректность вводимых email адресов и сохранении корректных в файл.

В файле model.py в виде классов Email и FileIO уже реализована модель, с помощью которой обрабатываются и сохраняются в текстовый файл email адреса.

Создайте файл view.py, пропишите в нём класс CLI.
    
    В представлении должны быть реализованы:
      — ввод в stdin email адреса
      — вывод в stdout сообщения о некорректном адресе
      — вывод в stdout сообщения об успешном сохранении адреса

Создайте файл controller.py, пропишите в нём класс Application.
    
    Контроллер должен как обычно взаимодействовать с моделью и представлением. 
    
    Реализуйте в классе контроллера метод для сохранения переданного аргументом email адреса.
    
    Отдельным методом реализуйте условно-бесконечный цикл получения адресов от пользователя, с выходом из цикла по вводу пустой строки.
    
    Подсказка: в данной задаче для каждого обрабатываемого адреса должен быть создан отдельный экземпляр класса модели.

Создайте файл 1.py и импортируйте в него необходимые модули. 
Этот файл должен являться точкой входа в приложение.

    Инициируйте начло работы приложения.

Будьте внимательны со структорой импортов во всех модулях.



  =========================

Каждый класс должен быть документирован. 
Каждый метод кроме встроенных (специальных) должен быть документирован.

Каждое поле класса должно быть аннотировано. 
Атрибуты экземпляра аннотируются в том случае, если типы их значений не совпадают с соответствующими переданными в конструктор аргументами, или если атрибуты создаются безотносительно переданных в конструктор аргументов.
Каждый параметр (кроме self и cls) всех методов должен быть аннотирован. 
Каждое возвращаемое значение методов кроме встроенных (специальных) должно быть аннотировано.

Во всех случаях аннотация опускается, если с аннотируемым идентификатором может быть связан объект произвольного типа.

Помимо перечисленных в каждой задаче обязательных атрибутов классов и экземпляров возможно добавление собственных вспомогательных атрибутов и методов.

Работа классов тестируется в режиме инспекции файла с кодом.
Ввод и вывод в стандартные потоки результатов тестов копируются.
Копия в виде комментария помещается в конец файла с кодом задачи.

Невыполнение дополнительных задач не повлечёт снижения баллов за задание. Тем не менее они настоятельно рекомендуются к решению.

В сервис Журнал отправляется сообщение о выполнении всех частей задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Регулярно получайте обновления в свой локальный репозиторий из удалённого репозитория.